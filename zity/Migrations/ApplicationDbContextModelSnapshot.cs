// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using zity.Data;

#nullable disable

namespace zity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("zity.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuestionId" }, "question_id");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("zity.Models.Apartment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("id");

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int")
                        .HasColumnName("apartment_number");

                    b.Property<float>("Area")
                        .HasColumnType("float")
                        .HasColumnName("area");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int")
                        .HasColumnName("floor_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('IN_USE','EMPTY','DISRUPTION')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'EMPTY'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("apartments", (string)null);
                });

            modelBuilder.Entity("zity.Models.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Monthly")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("monthly");

                    b.Property<int?>("NewWater")
                        .HasColumnType("int")
                        .HasColumnName("new_water");

                    b.Property<int?>("OldWater")
                        .HasColumnType("int")
                        .HasColumnName("old_water");

                    b.Property<int>("RelationshipId")
                        .HasColumnType("int")
                        .HasColumnName("relationship_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('UNPAID','PAID','OVERDUE')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'UNPAID'");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("WaterReadingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("water_reading_date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RelationshipId" }, "relationship_id");

                    b.ToTable("bills", (string)null);
                });

            modelBuilder.Entity("zity.Models.BillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillId")
                        .HasColumnType("int")
                        .HasColumnName("bill_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BillId" }, "bill_id");

                    b.HasIndex(new[] { "ServiceId" }, "service_id");

                    b.ToTable("bill_details", (string)null);
                });

            modelBuilder.Entity("zity.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsReceive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_receive")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("zity.Models.OtherAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "QuestionId" }, "question_id")
                        .HasDatabaseName("question_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("other_answers", (string)null);
                });

            modelBuilder.Entity("zity.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int")
                        .HasColumnName("survey_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SurveyId" }, "survey_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("zity.Models.RejectionReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ReportId" }, "report_id");

                    b.ToTable("rejection_reasons", (string)null);
                });

            modelBuilder.Entity("zity.Models.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApartmentId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("apartment_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("enum('OWNER','USER')")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ApartmentId" }, "apartment_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("relationships", (string)null);
                });

            modelBuilder.Entity("zity.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("RelationshipId")
                        .HasColumnType("int")
                        .HasColumnName("relationship_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('PENDING','IN_PROGRESS','RESOLVED','REJECTED')")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'PENDING'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RelationshipId" }, "relationship_id")
                        .HasDatabaseName("relationship_id1");

                    b.ToTable("reports", (string)null);
                });

            modelBuilder.Entity("zity.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("zity.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CurrentMonthly")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("current_monthly");

                    b.Property<int>("EnvProtectionTax")
                        .HasColumnType("int")
                        .HasColumnName("env_protection_tax");

                    b.Property<float>("RoomPricePerM2")
                        .HasColumnType("float")
                        .HasColumnName("room_price_per_m2");

                    b.Property<float>("RoomVat")
                        .HasColumnType("float")
                        .HasColumnName("room_vat");

                    b.Property<string>("SystemStatus")
                        .IsRequired()
                        .HasColumnType("enum('PREPAYMENT','PAYMENT','OVERDUE','DELINQUENT')")
                        .HasColumnName("system_status");

                    b.Property<float>("WaterPricePerM3")
                        .HasColumnType("float")
                        .HasColumnName("water_price_per_m3");

                    b.Property<int>("WaterVat")
                        .HasColumnType("int")
                        .HasColumnName("water_vat");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("zity.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int")
                        .HasColumnName("total_questions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserCreateId")
                        .HasColumnType("int")
                        .HasColumnName("user_create_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserCreateId" }, "user_create_id");

                    b.ToTable("surveys", (string)null);
                });

            modelBuilder.Entity("zity.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("enum('MALE','FEMALE')")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsFirstLogin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_first_login")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("IsStaying")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_staying")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("NationId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("nation_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("enum('RESIDENT','ADMIN')")
                        .HasColumnName("user_type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NationId" }, "nation_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("zity.Models.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AnswerId" }, "answer_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id3");

                    b.ToTable("user_answers", (string)null);
                });

            modelBuilder.Entity("zity.Models.Answer", b =>
                {
                    b.HasOne("zity.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("answers_ibfk_1");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("zity.Models.Bill", b =>
                {
                    b.HasOne("zity.Models.Relationship", "Relationship")
                        .WithMany("Bills")
                        .HasForeignKey("RelationshipId")
                        .IsRequired()
                        .HasConstraintName("bills_ibfk_1");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("zity.Models.BillDetail", b =>
                {
                    b.HasOne("zity.Models.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .IsRequired()
                        .HasConstraintName("bill_details_ibfk_1");

                    b.HasOne("zity.Models.Service", "Service")
                        .WithMany("BillDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("bill_details_ibfk_2");

                    b.Navigation("Bill");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("zity.Models.Item", b =>
                {
                    b.HasOne("zity.Models.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .HasConstraintName("items_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("zity.Models.OtherAnswer", b =>
                {
                    b.HasOne("zity.Models.Question", "Question")
                        .WithMany("OtherAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("other_answers_ibfk_2");

                    b.HasOne("zity.Models.User", "User")
                        .WithMany("OtherAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("other_answers_ibfk_1");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("zity.Models.Question", b =>
                {
                    b.HasOne("zity.Models.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .HasConstraintName("questions_ibfk_1");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("zity.Models.RejectionReason", b =>
                {
                    b.HasOne("zity.Models.Report", "Report")
                        .WithMany("RejectionReasons")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("rejection_reasons_ibfk_1");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("zity.Models.Relationship", b =>
                {
                    b.HasOne("zity.Models.Apartment", "Apartment")
                        .WithMany("Relationships")
                        .HasForeignKey("ApartmentId")
                        .IsRequired()
                        .HasConstraintName("relationships_ibfk_2");

                    b.HasOne("zity.Models.User", "User")
                        .WithMany("Relationships")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("relationships_ibfk_1");

                    b.Navigation("Apartment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("zity.Models.Report", b =>
                {
                    b.HasOne("zity.Models.Relationship", "Relationship")
                        .WithMany("Reports")
                        .HasForeignKey("RelationshipId")
                        .HasConstraintName("reports_ibfk_1");

                    b.Navigation("Relationship");
                });

            modelBuilder.Entity("zity.Models.Survey", b =>
                {
                    b.HasOne("zity.Models.User", "UserCreate")
                        .WithMany("Surveys")
                        .HasForeignKey("UserCreateId")
                        .HasConstraintName("surveys_ibfk_1");

                    b.Navigation("UserCreate");
                });

            modelBuilder.Entity("zity.Models.UserAnswer", b =>
                {
                    b.HasOne("zity.Models.Answer", "Answer")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("user_answers_ibfk_2");

                    b.HasOne("zity.Models.User", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("user_answers_ibfk_1");

                    b.Navigation("Answer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("zity.Models.Answer", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("zity.Models.Apartment", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("zity.Models.Bill", b =>
                {
                    b.Navigation("BillDetails");
                });

            modelBuilder.Entity("zity.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("OtherAnswers");
                });

            modelBuilder.Entity("zity.Models.Relationship", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("zity.Models.Report", b =>
                {
                    b.Navigation("RejectionReasons");
                });

            modelBuilder.Entity("zity.Models.Service", b =>
                {
                    b.Navigation("BillDetails");
                });

            modelBuilder.Entity("zity.Models.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("zity.Models.User", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("OtherAnswers");

                    b.Navigation("Relationships");

                    b.Navigation("Surveys");

                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
